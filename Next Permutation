#Approach 1(using in built function in C++)
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
       next_permutation(nums.begin(),nums.end()); 
    }
};

#Approach 2
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(); 
        int ind = -1;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        if (ind != -1) {
            for (int i = n - 1; i > ind; i--) {
                if (nums[i] > nums[ind]) {
                    swap(nums[i], nums[ind]);
                    break;
                }
            }    
        }
        else{
            reverse(nums.begin(),nums.end());
            return;
        }
        reverse(nums.begin() + ind + 1, nums.end());
    }
};
