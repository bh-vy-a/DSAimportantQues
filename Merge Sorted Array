#Approach 1
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i,j;
        for( i=m, j=0;i<m+n,j<n;i++,j++){   
            nums1[i]=nums2[j];   
        }
        sort(nums1.begin(),nums1.end()); //O(nlogn)
    }
};
#Approach 2 (two pointer approach)
class Solution {
public:
   
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       int i = m-1;
        int j = n-1;
        int k = m+n-1;
        while(i>=0 && j>=0){
            if(nums1[i] > nums2[j]){
                nums1[k] = nums1[i];
                i--; k--;
            }
            else{
                nums1[k] = nums2[j];
                j--; k--;
            }
        }
        while(j>=0){
            nums1[k] = nums2[j];
            j--; k--;
        }
    }

};
