#Approach 1 (Memoization)
class Solution {
public:
    int mod=2000000000;;
     int f(int i,int j,vector<vector<int>>& obstacleGrid, vector<vector<int>> &dp){
        if (i == 0 && j == 0 && obstacleGrid[i][j] != 1) return 1; 
        if (i>= 0 && j >= 0 && obstacleGrid[i][j] == 1) return 0; 
        
        if (i < 0 || j < 0) return 0; 
        if (dp[i][j] != -1) return dp[i][j]; 
        int up = f(i - 1, j, obstacleGrid, dp);
        int left = f(i, j - 1, obstacleGrid, dp);
        dp[i][j] = (up + left) % mod;
    
        return dp[i][j];
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(); //rows
        int n=obstacleGrid[0].size(); //columns
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return f(m-1,n-1,obstacleGrid,dp);
    }
};
