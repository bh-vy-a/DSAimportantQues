#Approach 1 (space optimization)
class Solution {
public:
    int rob(vector<int>& nums) {
        int prev=nums[0];
        int prev2=0;
        for(int i=1;i<nums.size();i++){
            int take=nums[i];
            if(i>1) take+=prev2;
            int nottake=0+prev;
            int cur_i=max(take,nottake);
            prev2=prev;
            prev=cur_i;
        }
        return prev;
    }
};

#Approach 2 (Memoization)
class Solution {
public:
    int solve(int ind, vector<int>& nums,vector<int>& dp ){
        if (ind==0) return nums[ind];
        if (ind<0) return 0;
        if (dp[ind]!=-1) return dp[ind];
        int pick= nums[ind] + solve(ind-2, nums, dp);
        int notpick= 0+ solve(ind-1, nums, dp);
        return dp[ind] = max(pick, notpick);
    }
    int rob(vector<int>& nums) {
       int n=nums.size();
       vector<int> dp(n+1,-1);
       return solve(n-1,nums,dp); 
    }
};

#Appraoch 3 (Tabulation)
class Solution {
public:
    int rob(vector<int>& nums) {
       int n=nums.size();
       vector<int> dp(n,0);
       dp[0]=nums[0];
       for (int i=1;i<n;i++){
        
        int pick=nums[i]+0;
        if (i!=1) pick=nums[i] + dp[i-2];
        int notpick=0 + dp[i-1];
        dp[i]=max(pick,notpick);
       } 
       return dp[n-1];
    }
};
