#Approach 1 (recursion)
int f(int day,int last,vector<vector<int>> &points){
        if(day==0){
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    maxi=max(maxi,points[0][task]);
                }
            }
            return maxi;
        }
        else{
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    int point=points[day][task]+f(day-1,task,points);
                    maxi=max(maxi,point);
                }
            }
            return maxi;
        }
    }
    int maximumPoints(vector<vector<int>>& points, int n) {
        // Code here
        return f(n-1,3,points);
    }

#Approach 2 (Memoization)
int f(int day,int last,vector<vector<int>> &points, vector<vector<int>> &dp){
        if(day==0){
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    maxi=max(maxi,points[0][task]);
                }
            }
            return dp[0][last]=maxi;
        }
        else{
            if (dp[day][last]!=-1) return dp[day][last];
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    int point=points[day][task]+f(day-1,task,points,dp);
                    maxi=max(maxi,point);
                }
            }
            return dp[day][last]=maxi;
        }
    }
    int maximumPoints(vector<vector<int>>& points, int n) {
        // Code here
        vector<vector<int>>dp(n,vector<int>(4,-1));
        return f(n-1,3,points,dp);
    }

#Approach 3 (Tabulation)
int maximumPoints(vector<vector<int>>& points, int n) {
        
        vector<vector<int>>dp(n,vector<int>(4,0)); //zero se initialize
        dp[0][0]=max(points[0][1],points[0][2]);
        dp[0][1]=max(points[0][0],points[0][2]);
        dp[0][2]=max(points[0][0],points[0][1]);
        dp[0][3]=max(points[0][0],max(points[0][1],points[0][2])); //max only gives maximum of TWO elements
        
        
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                dp[day][last]=0;
                           
                for(int task=0;task<3;task++){
                    if(task!=last){
                        int point=points[day][task]+dp[day-1][task];
                        dp[day][last]=max(dp[day][last],point);
                    }
                }
            }
        }
        return dp[n-1][3];
    }

#Approach 4 (Space Optimization)
int maximumPoints(vector<vector<int>>& points, int n) {
        
        vector<int>prev(4,0); //zero se initialize
        prev[0]=max(points[0][1],points[0][2]);
        prev[1]=max(points[0][0],points[0][2]);
        prev[2]=max(points[0][0],points[0][1]);
        prev[3]=max(points[0][0],max(points[0][1],points[0][2])); //max only gives maximum of TWO elements
        
        vector<int>temp(4,0);
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                
                temp[last]=0;
                           
                for(int task=0;task<3;task++){
                    if(task!=last){
                        
                        temp[last]=max(temp[last],points[day][task]+prev[task]);
                    }
                }
            }
            prev=temp;
        }
        return prev[3];
    }
