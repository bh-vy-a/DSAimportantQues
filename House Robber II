#Approach 1 (Memoization)
class Solution {
public:
    int solve(int ind, vector<int>& nums,vector<int>& dp ){
        if (ind==0) return nums[ind];
        if (ind<0) return 0;
        if (dp[ind]!=-1) return dp[ind];
        int pick= nums[ind] + solve(ind-2, nums, dp);
        int notpick= 0+ solve(ind-1, nums, dp);
        return dp[ind] = max(pick, notpick);
    }
    int rob(vector<int>& nums) {
       int n=nums.size();
       if (n==1) return nums[0];
       vector<int> temp1,dp1(n, -1);
       vector<int> temp2, dp2(n, -1);
       for (int i = 1; i < n; i++) 
            temp1.push_back(nums[i]);
        for (int i = 0; i < n-1; i++) 
            temp2.push_back(nums[i]);
       
        
       return max(solve(n-2,temp1,dp1),solve(n-2,temp2,dp2)); 
    }
};
