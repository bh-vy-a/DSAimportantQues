#Approach 1 (Memoization)
int solve(int ind, vector<int>& height, vector<int>& dp){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int jumpTwo = INT_MAX;
    int jumpOne= solve(ind-1, height,dp)+ abs(height[ind]-height[ind-1]);
    if(ind>1)
        jumpTwo = solve(ind-2, height,dp)+ abs(height[ind]-height[ind-2]);
    
    return dp[ind]=min(jumpOne, jumpTwo);
}

int minimumEnergy(vector<int>& height, int n) {
  vector<int> dp(n+1,-1);
  return solve(n-1,height,dp);
}

#Approach 2 (Tabulation)
int minimumEnergy(vector<int>& height, int n) {
vector<int> dp(n,-1);
  dp[0]=0;
  for(int ind=1;ind<n;ind++){
        int jumpTwo = INT_MAX;
        int jumpOne= dp[ind-1] + abs(height[ind]-height[ind-1]);
        if(ind>1)
            jumpTwo = dp[ind-2] + abs(height[ind]-height[ind-2]);
    
        dp[ind]=min(jumpOne, jumpTwo);
  }
  return dp[n-1];
}

#Appraoch 3 (Space optimization)
 int minimumEnergy(vector<int>& height, int n) {
         
  int prev=0;
  int prev2=0;
  
  for(int ind=1;ind<n;ind++){
        int jumpTwo = INT_MAX;
        int jumpOne= prev + abs(height[ind]-height[ind-1]);
        if(ind>1)
            jumpTwo = prev2 + abs(height[ind]-height[ind-2]);
        int cur_i=min(jumpOne,jumpTwo);
        prev2=prev;
        prev=cur_i;     
  }
  return prev;
  }
